function net = cnn_mnist_init(varargin)
% CNN_MNIST_LENET Initialize a CNN similar for MNIST
opts.useBnorm = true ;
opts = vl_argparse(opts, varargin) ;

rng('default');
rng(0) ;

f=1/100 ;
net.layers = {} ;
%1
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(5,5,1,30, 'single'), zeros(1, 30, 'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
%2
net.layers{end+1} = struct('type', 'relu') ; 
%3
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
%4
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(5,5,30,60, 'single'),zeros(1,60,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
%5                       
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
%6                       
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(4,4,60,1000, 'single'),  zeros(1,1000,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
%7                       
net.layers{end+1} = struct('type', 'relu') ;

%8
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(1,1,1000,10, 'single'), zeros(1,10,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
%9                       
net.layers{end+1} = struct('type', 'softmaxloss') ;

